let iconMapUrl='./iconPaths.csv';
let thresholdsUrl='./lineChartBound.csv';
let displayLimit=800;
let testMode=true;
let thresholdTest=
"variable,lower_bound,upper_bound,range_0,range_1,color\n"+
"HR,50,120,30,220,8DD3F6\n"+
"RESP,12,35,0,50,FFFB85\n"+
"NBPS,90,160,50,250,\n"+
"NBPD,60,80,10,130,\n"+
"NBPm,65,120,10,180,A7F1C5\n"+
"ABPS,90,160,50,250,\n"+
"ABPD,60,80,10,130,\n"+
"ABPm,65,110,10,180,C4A2F6\n"+
"BT,35,38,31,42,F3A5B1\n";

let iconTest='id,location\n'+
'1,./pics/CT.png\n'+
'2,./pics/MRI.png\n'+
'3,./pics/blood_transfusion.png\n'+
'4,./pics/DRAINAGE.png\n'+
'5,./pics/PICC.png\n'+
'6,./pics/LAB.png\n'+
'7,./pics/ENDO.png\n'+
'8,./pics/NG.png\n'+
'9,./pics/DRUG.png\n'+
'10,./pics/BACTERIA.png\n'+
'11,./pics/ISOLATION.png\n'+
'12,./pics/EEG.png\n'+
'13,./pics/ANGIO.png\n'+
'14,./pics/SCOPY.png\n'+
'15,./pics/GRAPHY.png\n'+
'16,./pics/CHEST_M.png\n'+
'17,./pics/LOW_PRESSION.png\n'+
'18,./pics/SMEAR.png\n'+
'19,./pics/TAE.png\n'+
'20,./pics/TEE.png\n'+
'21,./pics/CPR.png\n'+
'22,./pics/HD.png\n'+
'23,./pics/PUNCTURE.png\n'+
'24,./pics/LAB_HAE.png\n';

let testData=
{
  "data":{
    "columns":
    [{"label":"病歷號"},
    	{"label":"紀錄日期"},
      {"label":"紀錄時間"},
      {"label":"分隔"},
      {"label":"ICON_ID"},
      {"label":"執行內容"},
      {"label":"說明"},
      {"label":"說明1"},
      {"label":"HR"},
      {"label":"NBPm"},
      {"label":"RESP"},
      {"label":"ABPm"},
      {"label":"BT"}]
      ,
    "data":[
      ["64","20220421","00:00","2","9","Micafungin(IV)(1) Piperacillin(IV)(1) Teicoplanin(IV)(4)","NBPs:144    NBPd:91    ABPs:.    ABPd:.","","","109.2222222","20","","37.3"],
["64","20220421","00:00","4","7","INTUBATION","NBPs:144    NBPd:91    ABPs:.    ABPd:.","","","109.111111111111","20","","37.3"],
["64","20220421","00:00","4","7","ENDOTRACHEAL TUBE ","NBPs:144    NBPd:91    ABPs:.    ABPd:.","","","109","20","","37.3"],
["64","20220421","00:00","8","3","BLOOD TRANSFUSION","NBPs:144    NBPd:91    ABPs:.    ABPd:.","","","109","20","","37.3"],
["64","20220421","00:00","10","17","","NBPs:144    NBPd:91    ABPs:.    ABPd:.","","","109","20","","37.3"],
["64","20220421","08:00","","","","NBPs:136    NBPd:77    ABPs:.    ABPd:.","","119","97","22","","37.8"],
["64","20220421","10:00","","","","NBPs:.    NBPd:.    ABPs:.    ABPd:.","","","","","","37.3"],
["64","20220421","11:00","","","","NBPs:156    NBPd:103    ABPs:.    ABPd:.","","","121","22","","38.2"],
["64","20220421","12:00","3","8","新陳代謝","NBPs:158    NBPd:96    ABPs:.    ABPd:.","Cortisol:      25","","117","22","","38.4"],
["64","20220421","12:00","3","8","肝腎功能","NBPs:158    NBPd:96    ABPs:.    ABPd:.","ALT/GPT:      23        AST/GOT:      31        Albumin:       3        BUN(B):      49         Creatinine(B):       3  DirectBilirubi:       0 TotalBilirubin:       0","","117","22","","38.4"],
["64","20220421","12:00","3","8","感染","NBPs:158    NBPd:96    ABPs:.    ABPd:.","CRP:     220            Procalcitonin:      13","","117","22","","38.4"],
["64","20220421","12:00","3","8","GAS","NBPs:158    NBPd:96    ABPs:.    ABPd:.","ABE:      -2            HCO3:      21           SAT:      89            SBC:      22            SBE:      -3            TCO2:      22           Temperature:      37","","117","22","","38.4"],
["64","20220421","12:00","3","8","電解質","NBPs:158    NBPd:96    ABPs:.    ABPd:.","K:       4              Na:     154","","117","22","","38.4"],
["64","20220421","12:00","3","24","凝血功能","NBPs:158    NBPd:96    ABPs:.    ABPd:.","APTT:      30           INR:       1            Nor.plasmamean:      10 Nor.plasmamean:      28 P.T:      11","","117","22","","38.4"],
["64","20220421","12:00","3","24","CBC","NBPs:158    NBPd:96    ABPs:.    ABPd:.","AbsNeutro.#:   12502    Basophil:       0       Eosinophil:       0     Lymphocyte:       6     MCH:      30            MCHC:      32           MCV:      94","","117","22","","38.4"],
["64","20220421","12:00","3","8","心肺檢驗","NBPs:158    NBPd:96    ABPs:.    ABPd:.","NT-ProBNP:   12846","","117","22","","38.4"],
["64","20220421","14:00","","","","NBPs:170    NBPd:102    ABPs:.    ABPd:.","","118","125","24","","37.7"],
["64","20220421","15:00","","","","NBPs:174    NBPd:100    ABPs:.    ABPd:.","","141","125","17","","37.7"],
["64","20220421","16:00","","","","NBPs:128    NBPd:81    ABPs:.    ABPd:.","","","97","22","","38.7"],
["64","20220421","18:00","3","8","GAS","","ABE:      -8            HCO3:      20           SAT:      99            SBC:      18            SBE:      -8            TCO2:      22           Temperature:      37","","","","",""],
["64","20220421","18:00","3","8","心肺檢驗","","Troponin-I:       0","","","","",""],
["64","20220421","19:00","","","","NBPs:150    NBPd:77    ABPs:.    ABPd:.","","117","101","19","","38.5"],
["64","20220421","21:00","","","","NBPs:129    NBPd:79    ABPs:.    ABPd:.","","115","96","21","",""],
["64","20220421","22:00","","","","NBPs:112    NBPd:72    ABPs:.    ABPd:.","","119","85","17","",""],
["64","20220422","00:00","2","9","Micafungin(IV)(2) Piperacillin(IV)(2) Teicoplanin(IV)(5)","NBPs:108    NBPd:67    ABPs:.    ABPd:.","","109","81","17","",""],
["64","20220422","00:00","4","8","NG FEEDING (1500KCAL)","NBPs:108    NBPd:67    ABPs:.    ABPd:.","","109","81","17","",""],
["64","20220422","00:00","7","15"," DOPPLER AND COLOR","NBPs:108    NBPd:67    ABPs:.    ABPd:.","","109","81","17","",""],
["64","20220422","01:00","","","","NBPs:110    NBPd:60    ABPs:.    ABPd:.","","110","77","16","","36.9"],
["64","20220422","03:00","","","","NBPs:94    NBPd:62    ABPs:.    ABPd:.","","103","73","19","",""],
["64","20220422","04:00","","","","NBPs:97    NBPd:60    ABPs:.    ABPd:.","","104","72","18","","36.4"],
["64","20220422","06:00","","","","NBPs:104    NBPd:56    ABPs:.    ABPd:.","","99","72","18","",""],
["64","20220422","07:00","","","","NBPs:111    NBPd:64    ABPs:.    ABPd:.","","102","80","18","",""],
["64","20220422","09:00","","","","NBPs:128    NBPd:56    ABPs:.    ABPd:.","","110","80","19","","35.8"],
["64","20220422","10:00","","","","NBPs:103    NBPd:54    ABPs:.    ABPd:.","","100","70","20","",""],
["64","20220422","12:00","","","","NBPs:114    NBPd:48    ABPs:.    ABPd:.","","104","70","14","",""],
["64","20220422","13:00","","","","NBPs:108    NBPd:54    ABPs:.    ABPd:.","","106","72","21","","36.1"],
["64","20220422","15:00","","","","NBPs:114    NBPd:47    ABPs:.    ABPd:.","","104","69","21","",""],
["64","20220422","16:00","","","","NBPs:112    NBPd:59    ABPs:.    ABPd:.","","101","77","19","","36.3"],
["64","20220422","18:00","","","","NBPs:103    NBPd:50    ABPs:.    ABPd:.","","100","68","20","",""],
["64","20220422","19:00","","","","NBPs:97    NBPd:57    ABPs:.    ABPd:.","","95","70","22","",""],
["64","20220422","21:00","","","","NBPs:109    NBPd:54    ABPs:.    ABPd:.","","102","72","18","","36.2"],
["64","20220422","22:00","","","","NBPs:102    NBPd:52    ABPs:.    ABPd:.","","102","68","19","",""],
["64","20220423","00:00","2","9","Micafungin(IV)(3) Piperacillin(IV)(3) Teicoplanin(IV)(6)","NBPs:.    NBPd:.    ABPs:94    ABPd:54","","105","","22","67",""],
["64","20220423","01:00","","","","NBPs:.    NBPd:.    ABPs:108    ABPd:56","","97","","21","73","36.6"],
["64","20220423","03:00","","","","NBPs:.    NBPd:.    ABPs:112    ABPd:56","","91","","23","75",""],
["64","20220423","04:00","","","","NBPs:.    NBPd:.    ABPs:132    ABPd:64","","99","","21","87","36"],
["64","20220423","06:00","3","8","電解質","NBPs:.    NBPd:.    ABPs:135    ABPd:65","Na:     153","97","","23","88",""],
["64","20220423","07:00","","","","NBPs:.    NBPd:.    ABPs:116    ABPd:59","","95","","21","78",""],
["64","20220423","09:00","","","","NBPs:118    NBPd:61    ABPs:119    ABPd:57","","97","80","20","78","35.2"],
["64","20220423","10:00","","","","NBPs:.    NBPd:.    ABPs:115    ABPd:57","","95","","21","76",""],
["64","20220423","12:00","","","","NBPs:.    NBPd:.    ABPs:126    ABPd:61","","97","","14","83",""],
["64","20220423","13:00","","","","NBPs:.    NBPd:.    ABPs:112    ABPd:57","","95","","18","75","36.4"],
["64","20220423","15:00","","","","NBPs:.    NBPd:.    ABPs:124    ABPd:62","","92","","12","83",""],
["64","20220423","16:00","","","","NBPs:114    NBPd:67    ABPs:127    ABPd:60","","97","83","19","82","35.9"],
["64","20220423","18:00","","","","NBPs:.    NBPd:.    ABPs:113    ABPd:51","","95","","15","72",""],
["64","20220423","19:00","","","","NBPs:.    NBPd:.    ABPs:124    ABPd:58","","89","","18","80",""],
["64","20220423","21:00","","","","NBPs:.    NBPd:.    ABPs:127    ABPd:58","","93","","22","81","35.5"],
["64","20220423","22:00","","","","NBPs:.    NBPd:.    ABPs:134    ABPd:60","","94","","19","84",""],
["64","20220424","00:00","2","9","Micafungin(IV)(4) Piperacillin(IV)(4) Teicoplanin(IV)(7)","NBPs:.    NBPd:.    ABPs:140    ABPd:61","","86","","29","87",""],
["64","20220424","01:00","","","","NBPs:.    NBPd:.    ABPs:141    ABPd:63","","94","","23","89","37"],
["64","20220424","03:00","","","","NBPs:.    NBPd:.    ABPs:150    ABPd:66","","95","","16","94",""],
["64","20220424","04:00","","","","NBPs:.    NBPd:.    ABPs:158    ABPd:70","","92","","21","99","36.3"],
["64","20220424","06:00","","","","NBPs:.    NBPd:.    ABPs:165    ABPd:70","","98","","21","102",""],
["64","20220424","07:00","","","","NBPs:.    NBPd:.    ABPs:166    ABPd:68","","100","","23","100",""],
["64","20220424","09:00","","","","NBPs:126    NBPd:74    ABPs:142    ABPd:65","","106","91","23","91","37.4"],
["64","20220424","10:00","","","","NBPs:.    NBPd:.    ABPs:110    ABPd:51","","106","","25","71","38.2"],
["64","20220424","11:00","","","","NBPs:.    NBPd:.    ABPs:.    ABPd:.","","","","","","37.7"],
["64","20220424","12:00","","","","NBPs:.    NBPd:.    ABPs:113    ABPd:54","","96","","16","74",""],
["64","20220424","13:00","","","","NBPs:.    NBPd:.    ABPs:105    ABPd:53","","95","","23","70","36.6"],
["64","20220424","15:00","","","","NBPs:.    NBPd:.    ABPs:108    ABPd:53","","96","","18","71",""],
["64","20220424","16:00","","","","NBPs:122    NBPd:68    ABPs:119    ABPd:58","","94","86","20","78","36.8"],
["64","20220424","18:00","","","","NBPs:.    NBPd:.    ABPs:104    ABPd:51","","93","","19","69",""],
["64","20220424","19:00","","","","NBPs:.    NBPd:.    ABPs:126    ABPd:56","","90","","20","79",""],
["64","20220424","21:00","","","","NBPs:.    NBPd:.    ABPs:140    ABPd:61","","89","","20","87","35.2"],
["64","20220424","22:00","","","","NBPs:.    NBPd:.    ABPs:132    ABPd:57","","92","","18","82",""],
["64","20220425","00:00","","","","NBPs:.    NBPd:.    ABPs:148    ABPd:65","","91","","22","93",""],
["64","20220425","01:00","","","","NBPs:131    NBPd:73    ABPs:.    ABPd:.","","94","92","23","","36.2"],
["64","20220425","03:00","","","","NBPs:136    NBPd:68    ABPs:.    ABPd:.","","86","91","21","",""],
["64","20220425","04:00","","","","NBPs:130    NBPd:67    ABPs:.    ABPd:.","","95","88","20","","36"],
["64","20220425","06:00","3","8","肝腎功能","NBPs:125    NBPd:69    ABPs:.    ABPd:.","Albumin:       3        BUN(B):      63         Creatinine(B):       3","95","88","22","",""],
["64","20220425","06:00","3","8","感染","NBPs:125    NBPd:69    ABPs:.    ABPd:.","CRP:     115            Procalcitonin:       3","95","88","22","",""],
["64","20220425","06:00","3","8","電解質","NBPs:125    NBPd:69    ABPs:.    ABPd:.","Calcium:       9        K:       4              Mg:       1             Na:     149","95","88","22","",""],
["64","20220425","06:00","3","24","CBC","NBPs:125    NBPd:69    ABPs:.    ABPd:.","AbsNeutro.#:   14288    Basophil:       0       Eosinophil:       2     Lymphocyte:       7     MCH:      30            MCHC:      32           MCV:      95","95","88","22","",""],
["64","20220425","07:00","","","","NBPs:119    NBPd:60    ABPs:.    ABPd:.","","97","79","23","",""],
["64","20220425","09:00","","","","NBPs:121    NBPd:58    ABPs:.    ABPd:.","","98","79","24","","36.4"],
["64","20220425","10:00","","","","NBPs:114    NBPd:53    ABPs:.    ABPd:.","","101","73","20","",""],
["64","20220425","12:00","","","","NBPs:165    NBPd:81    ABPs:.    ABPd:.","","119","109","34","",""],
["64","20220425","13:00","","","","NBPs:88    NBPd:53    ABPs:.    ABPd:.","","113","65","19","","37.3"],
["64","20220425","14:00","","","","NBPs:103    NBPd:49    ABPs:.    ABPd:.","","113","67","20","",""],
["64","20220425","15:00","","","","NBPs:101    NBPd:46    ABPs:94    ABPd:40","","115","64","17","58",""],
["64","20220425","16:00","","","","NBPs:134    NBPd:57    ABPs:151    ABPd:60","","128","83","19","90","37.2"],
["64","20220425","18:00","","","","NBPs:.    NBPd:.    ABPs:108    ABPd:51","","117","","19","70",""],
["64","20220425","19:00","","","","NBPs:.    NBPd:.    ABPs:122    ABPd:53","","114","","17","76",""],
["64","20220425","21:00","","","","NBPs:.    NBPd:.    ABPs:105    ABPd:48","","108","","14","67","37.2"],
["64","20220425","22:00","","","","NBPs:.    NBPd:.    ABPs:91    ABPd:46","","108","","21","61",""],
["64","20220426","00:00","1","10","2 _PUS  _Yeast-like","NBPs:.    NBPd:.    ABPs:95    ABPd:47","","105","","15","63",""],
["64","20220426","00:00","1","10","1 _PUS  _Enterococcus faecium","NBPs:.    NBPd:.    ABPs:95    ABPd:47","","105","","15","63",""],
["64","20220426","01:00","","","","NBPs:101    NBPd:68    ABPs:111    ABPd:51","","101","79","18","48","37.3"],
["64","20220426","03:00","","","","NBPs:.    NBPd:.    ABPs:119    ABPd:52","","98","","15","74",""],
["64","20220426","04:00","","","","NBPs:.    NBPd:.    ABPs:129    ABPd:56","","94","","15","80","36.9"],
["64","20220426","06:00","","","","NBPs:.    NBPd:.    ABPs:141    ABPd:57","","97","","14","85",""],
["64","20220426","07:00","","","","NBPs:.    NBPd:.    ABPs:131    ABPd:55","","108","","17","80",""],
["64","20220426","09:00","","","","NBPs:113    NBPd:55    ABPs:138    ABPd:60","","97","74","17","86","37"],
["64","20220426","10:00","","","","NBPs:.    NBPd:.    ABPs:127    ABPd:56","","102","","18","80",""],
["64","20220426","12:00","3","8","電解質","NBPs:.    NBPd:.    ABPs:115    ABPd:54","Calcium:       9        K:       3              Mg:       2             Na:     148","92","","20","74",""],
["64","20220426","13:00","","","","NBPs:.    NBPd:.    ABPs:121    ABPd:58","","93","","18","79","36.4"],
["64","20220426","15:00","","","","NBPs:.    NBPd:.    ABPs:109    ABPd:53","","89","","17","72",""],
["64","20220426","16:00","","","","NBPs:134    NBPd:66    ABPs:131    ABPd:57","","97","89","17","82","36.1"],
["64","20220426","18:00","","","","NBPs:.    NBPd:.    ABPs:134    ABPd:55","","97","","19","81",""],
["64","20220426","19:00","","","","NBPs:.    NBPd:.    ABPs:139    ABPd:59","","97","","21","86",""],
["64","20220426","21:00","","","","NBPs:.    NBPd:.    ABPs:112    ABPd:51","","94","","18","71","36.5"],
["64","20220426","22:00","","","","NBPs:.    NBPd:.    ABPs:129    ABPd:55","","89","","18","79",""],
["64","20220427","00:00","1","10","1 _SP   _Mold","NBPs:.    NBPd:.    ABPs:144    ABPd:63","","94","","19","90",""],
["64","20220427","01:00","","","","NBPs:.    NBPd:.    ABPs:151    ABPd:63","","92","","20","92","36.9"],
["64","20220427","03:00","","","","NBPs:.    NBPd:.    ABPs:148    ABPd:66","","93","","19","93",""],
["64","20220427","04:00","","","","NBPs:.    NBPd:.    ABPs:146    ABPd:61","","95","","18","89","36.8"],
["64","20220427","06:00","","","","NBPs:.    NBPd:.    ABPs:141    ABPd:65","","98","","24","90",""],
["64","20220427","07:00","","","","NBPs:.    NBPd:.    ABPs:146    ABPd:62","","103","","20","90",""],
["64","20220427","09:00","","","","NBPs:119    NBPd:58    ABPs:134    ABPd:62","","106","78","14","86","37.4"],
["64","20220427","10:00","","","","NBPs:.    NBPd:.    ABPs:116    ABPd:57","","106","","20","76",""],
["64","20220427","12:00","","","","NBPs:.    NBPd:.    ABPs:101    ABPd:53","","107","","21","69",""],
["64","20220427","13:00","","","","NBPs:.    NBPd:.    ABPs:103    ABPd:54","","97","","21","70","37.3"],
["64","20220427","15:00","","","","NBPs:.    NBPd:.    ABPs:108    ABPd:53","","94","","19","71",""],
["64","20220427","16:00","","","","NBPs:115    NBPd:51    ABPs:116    ABPd:55","","92","72","17","75","36.1"],
["64","20220427","18:00","","","","NBPs:.    NBPd:.    ABPs:133    ABPd:61","","90","","19","85",""],
["64","20220427","19:00","","","","NBPs:.    NBPd:.    ABPs:133    ABPd:60","","96","","18","84",""],
["64","20220427","21:00","","","","NBPs:.    NBPd:.    ABPs:144    ABPd:62","","91","","20","89","35.8"],
["64","20220427","22:00","","","","NBPs:.    NBPd:.    ABPs:132    ABPd:59","","92","","20","83",""],
["64","20220428","00:00","1","10","1 _SP   _Mold","NBPs:.    NBPd:.    ABPs:131    ABPd:59","","91","","20","83",""],
["64","20220428","00:00","5","14","BRONCHOSCOPY","NBPs:.    NBPd:.    ABPs:131    ABPd:59","","91","","20","83",""],
["64","20220428","00:00","7","1","C.T.  (-)","NBPs:.    NBPd:.    ABPs:131    ABPd:59","","91","","20","83",""],
["64","20220428","01:00","","","","NBPs:.    NBPd:.    ABPs:139    ABPd:61","","92","","20","87","37"],
["64","20220428","03:00","","","","NBPs:.    NBPd:.    ABPs:152    ABPd:63","","91","","18","93",""],
["64","20220428","04:00","","","","NBPs:.    NBPd:.    ABPs:158    ABPd:69","","95","","23","98","36.6"],
["64","20220428","06:00","3","8","新陳代謝","NBPs:.    NBPd:.    ABPs:153    ABPd:65","Cortisol:      10       T4:       5","94","","21","94",""],
["64","20220428","06:00","3","8","肝腎功能","NBPs:.    NBPd:.    ABPs:153    ABPd:65","AST/GOT:      23        Albumin:       3","94","","21","94",""],
["64","20220428","06:00","3","8","感染","NBPs:.    NBPd:.    ABPs:153    ABPd:65","Procalcitonin:       1","94","","21","94",""],
["64","20220428","06:00","3","8","電解質","NBPs:.    NBPd:.    ABPs:153    ABPd:65","Calcium:      10        InorganicP:       4     K:       3              Na:     143","94","","21","94",""],
["64","20220428","06:00","3","24","CBC","NBPs:.    NBPd:.    ABPs:153    ABPd:65","AbsNeutro.#:   11247    Basophil:       0       Eosinophil:       2     Lymphocyte:      11     MCH:      30            MCHC:      31           MCV:      98","94","","21","94",""],
["64","20220428","06:00","3","8","心肺檢驗","NBPs:.    NBPd:.    ABPs:153    ABPd:65","NT-ProBNP:    1295","94","","21","94",""],
["64","20220428","07:00","","","","NBPs:.    NBPd:.    ABPs:142    ABPd:62","","93","","22","88",""],
["64","20220428","09:00","","","","NBPs:.    NBPd:.    ABPs:149    ABPd:63","","96","","22","92","36"],
["64","20220428","10:00","","","","NBPs:.    NBPd:.    ABPs:141    ABPd:59","","91","","21","87",""],
["64","20220428","12:00","","","","NBPs:.    NBPd:.    ABPs:115    ABPd:52","","98","","21","73","36.3"],
["64","20220428","13:00","","","","NBPs:.    NBPd:.    ABPs:121    ABPd:55","","94","","24","77",""],
["64","20220428","14:00","","","","NBPs:.    NBPd:.    ABPs:130    ABPd:58","","91","","25","82",""],
["64","20220428","15:00","","","","NBPs:.    NBPd:.    ABPs:133    ABPd:61","","93","","21","85",""],
["64","20220428","16:00","","","","NBPs:122    NBPd:57    ABPs:127    ABPd:58","","91","79","23","81","36.2"],
["64","20220428","18:00","","","","NBPs:.    NBPd:.    ABPs:137    ABPd:59","","92","","23","85",""],
["64","20220428","19:00","","","","NBPs:.    NBPd:.    ABPs:133    ABPd:57","","91","","22","82",""],
["64","20220428","21:00","","","","NBPs:.    NBPd:.    ABPs:141    ABPd:60","","92","","21","87","36.8"],
["64","20220428","22:00","","","","NBPs:.    NBPd:.    ABPs:140    ABPd:59","","96","","25","86",""],
["64","20220429","00:00","","","","NBPs:.    NBPd:.    ABPs:142    ABPd:60","","93","","24","87",""],
["64","20220429","01:00","","","","NBPs:.    NBPd:.    ABPs:147    ABPd:61","","100","","24","90","36"],
["64","20220429","03:00","","","","NBPs:.    NBPd:.    ABPs:135    ABPd:56","","97","","23","82",""],
["64","20220429","04:00","","","","NBPs:.    NBPd:.    ABPs:129    ABPd:59","","98","","23","82","36.6"],
["64","20220429","06:00","","","","NBPs:.    NBPd:.    ABPs:117    ABPd:58","","97","","22","78",""],
["64","20220429","07:00","","","","NBPs:.    NBPd:.    ABPs:119    ABPd:58","","96","","21","78",""],
["64","20220429","09:00","","","","NBPs:.    NBPd:.    ABPs:96    ABPd:50","","91","","17","65","36.6"],
["64","20220429","10:00","","","","NBPs:.    NBPd:.    ABPs:145    ABPd:65","","88","","22","92",""],
["64","20220429","12:00","3","8","電解質","NBPs:.    NBPd:.    ABPs:121    ABPd:62","Calcium:       9        InorganicP:       4     K:       4              Mg:       2             Na:     143","90","","24","82",""],
["64","20220429","13:00","","","","NBPs:.    NBPd:.    ABPs:115    ABPd:55","","85","","22","75","36.6"],
["64","20220429","15:00","","","","NBPs:.    NBPd:.    ABPs:96    ABPd:49","","87","","22","65",""],
["64","20220429","16:00","","","","NBPs:115    NBPd:57    ABPs:135    ABPd:61","","92","76","20","85","37.1"],
["64","20220429","18:00","","","","NBPs:.    NBPd:.    ABPs:137    ABPd:60","","91","","20","86",""],
["64","20220429","19:00","","","","NBPs:.    NBPd:.    ABPs:128    ABPd:56","","92","","21","80",""],
["64","20220429","21:00","","","","NBPs:.    NBPd:.    ABPs:132    ABPd:64","","88","","20","87","37"],
["64","20220429","22:00","","","","NBPs:.    NBPd:.    ABPs:111    ABPd:55","","90","","21","74",""],
["64","20220430","00:00","","","","NBPs:.    NBPd:.    ABPs:135    ABPd:61","","85","","18","86",""],
["64","20220430","01:00","","","","NBPs:.    NBPd:.    ABPs:114    ABPd:54","","84","","18","74","36.3"],
["64","20220430","03:00","","","","NBPs:.    NBPd:.    ABPs:138    ABPd:63","","85","","22","88",""],
["64","20220430","04:00","","","","NBPs:.    NBPd:.    ABPs:142    ABPd:63","","86","","21","89","37"],
["64","20220430","06:00","","","","NBPs:.    NBPd:.    ABPs:132    ABPd:59","","86","","24","83",""],
["64","20220430","07:00","","","","NBPs:.    NBPd:.    ABPs:106    ABPd:51","","80","","19","69",""],
["64","20220430","09:00","","","","NBPs:134    NBPd:57    ABPs:132    ABPd:62","","84","83","17","85","36.4"],
["64","20220430","10:00","","","","NBPs:.    NBPd:.    ABPs:106    ABPd:51","","82","","17","69",""],
["64","20220430","12:00","","","","NBPs:.    NBPd:.    ABPs:110    ABPd:50","","81","","19","70",""],
["64","20220430","13:00","","","","NBPs:.    NBPd:.    ABPs:113    ABPd:49","","80","","20","70","36"],
["64","20220430","15:00","","","","NBPs:.    NBPd:.    ABPs:121    ABPd:49","","83","","18","73",""],
["64","20220430","16:00","","","","NBPs:110    NBPd:60    ABPs:128    ABPd:55","","78","77","21","79","35.1"],
["64","20220430","18:00","","","","NBPs:.    NBPd:.    ABPs:131    ABPd:57","","80","","23","82",""],
["64","20220430","19:00","","","","NBPs:.    NBPd:.    ABPs:111    ABPd:48","","76","","20","69",""],
["64","20220430","21:00","","","","NBPs:.    NBPd:.    ABPs:122    ABPd:55","","75","","19","77","36.7"],
["64","20220430","22:00","","","","NBPs:.    NBPd:.    ABPs:117    ABPd:53","","79","","19","74",""],
["64","20220501","00:00","","","","NBPs:.    NBPd:.    ABPs:125    ABPd:56","","79","","18","79",""],
["64","20220501","01:00","","","","NBPs:136    NBPd:59    ABPs:134    ABPd:56","","81","85","17","82","36.9"],
["64","20220501","03:00","","","","NBPs:.    NBPd:.    ABPs:131    ABPd:58","","80","","19","82",""],
["64","20220501","04:00","","","","NBPs:.    NBPd:.    ABPs:147    ABPd:64","","88","","19","91","37.7"],
["64","20220501","06:00","","","","NBPs:.    NBPd:.    ABPs:142    ABPd:68","","88","","20","93",""],
["64","20220501","07:00","","","","NBPs:.    NBPd:.    ABPs:100    ABPd:48","","77","","17","65",""],
["64","20220501","09:00","","","","NBPs:.    NBPd:.    ABPs:141    ABPd:61","","87","","17","88","36.4"],
["64","20220501","10:00","","","","NBPs:.    NBPd:.    ABPs:139    ABPd:58","","87","","20","85",""],
["64","20220501","12:00","","","","NBPs:.    NBPd:.    ABPs:133    ABPd:56","","88","","23","82",""],
["64","20220501","13:00","","","","NBPs:.    NBPd:.    ABPs:120    ABPd:52","","85","","18","74","37.2"],
["64","20220501","15:00","","","","NBPs:.    NBPd:.    ABPs:130    ABPd:56","","90","","22","81",""],
["64","20220501","16:00","","","","NBPs:114    NBPd:52    ABPs:131    ABPd:57","","88","73","21","81","36.3"],
["64","20220501","18:00","","","","NBPs:.    NBPd:.    ABPs:134    ABPd:55","","88","","19","81",""],
["64","20220501","19:00","","","","NBPs:.    NBPd:.    ABPs:133    ABPd:59","","90","","23","83",""],
["64","20220501","21:00","","","","NBPs:.    NBPd:.    ABPs:114    ABPd:58","","84","","20","77","37.8"],
["64","20220501","22:00","","","","NBPs:.    NBPd:.    ABPs:132    ABPd:62","","85","","19","85","36.9"],
["64","20220502","00:00","","","","NBPs:.    NBPd:.    ABPs:133    ABPd:61","","85","","20","85",""],
["64","20220502","01:00","","","","NBPs:.    NBPd:.    ABPs:149    ABPd:66","","85","","20","94","36"],
["64","20220502","03:00","","","","NBPs:.    NBPd:.    ABPs:128    ABPd:57","","79","","17","81",""],
["64","20220502","04:00","","","","NBPs:.    NBPd:.    ABPs:135    ABPd:60","","85","","20","85","37"],
["64","20220502","06:00","3","8","肝腎功能","NBPs:.    NBPd:.    ABPs:100    ABPd:52","ALT/GPT:      24        Albumin:       3        BUN(B):      55         Creatinine(B):       3  TotalBilirubin:       0","82","","17","68",""],
["64","20220502","06:00","3","8","感染","NBPs:.    NBPd:.    ABPs:100    ABPd:52","CRP:      33","82","","17","68",""],
["64","20220502","06:00","3","8","電解質","NBPs:.    NBPd:.    ABPs:100    ABPd:52","Calcium:       9        InorganicP:       4     K:       3              Mg:       2             Na:     144","82","","17","68",""],
["64","20220502","06:00","3","24","凝血功能","NBPs:.    NBPd:.    ABPs:100    ABPd:52","INR:       1            Nor.plasmamean:      10 P.T:      10","82","","17","68",""],
["64","20220502","06:00","3","24","CBC","NBPs:.    NBPd:.    ABPs:100    ABPd:52","AbsNeutro.#:    8138    Basophil:       1       Eosinophil:       3     Lymphocyte:      13     MCH:      30            MCHC:      30           MCV:     100","82","","17","68",""],
["64","20220502","06:00","3","8","心肺檢驗","NBPs:.    NBPd:.    ABPs:100    ABPd:52","NT-ProBNP:    1237","82","","17","68",""],
["64","20220502","07:00","","","","NBPs:.    NBPd:.    ABPs:120    ABPd:57","","81","","17","78",""],
["64","20220502","09:00","","","","NBPs:.    NBPd:.    ABPs:149    ABPd:65","","89","","22","93","36.5"],
["64","20220502","10:00","","","","NBPs:.    NBPd:.    ABPs:143    ABPd:61","","89","","20","88",""],
["64","20220502","12:00","","","","NBPs:.    NBPd:.    ABPs:132    ABPd:57","","87","","18","82",""],
["64","20220502","13:00","","","","NBPs:.    NBPd:.    ABPs:150    ABPd:63","","89","","22","92","35.9"],
["64","20220502","15:00","","","","NBPs:.    NBPd:.    ABPs:145    ABPd:63","","90","","25","90",""],
["64","20220502","16:00","","","","NBPs:135    NBPd:45    ABPs:156    ABPd:62","","88","75","22","93","36.8"],
["64","20220502","18:00","","","","NBPs:.    NBPd:.    ABPs:151    ABPd:61","","92","","22","91",""],
["64","20220502","19:00","","","","NBPs:.    NBPd:.    ABPs:136    ABPd:59","","89","","20","84",""],
["64","20220502","21:00","","","","NBPs:.    NBPd:.    ABPs:139    ABPd:62","","87","","19","88","37.5"],
["64","20220502","22:00","","","","NBPs:.    NBPd:.    ABPs:143    ABPd:63","","88","","17","89","36.2"],
["64","20220503","00:00","1","10","1 _PCN  _Yeast-like","NBPs:.    NBPd:.    ABPs:145    ABPd:64","","85","","16","91",""],
["64","20220503","00:00","1","10","1 _PCN  _Candida glabrata (Torulopsis glabrata)","NBPs:.    NBPd:.    ABPs:145    ABPd:64","","85","","16","91",""],
["64","20220503","01:00","","","","NBPs:122    NBPd:69    ABPs:154    ABPd:68","","90","87","21","97","36"],
["64","20220503","03:00","","","","NBPs:.    NBPd:.    ABPs:131    ABPd:59","","83","","18","83",""],
["64","20220503","04:00","","","","NBPs:.    NBPd:.    ABPs:152    ABPd:67","","87","","18","95","36.6"],
["64","20220503","06:00","","","","NBPs:.    NBPd:.    ABPs:162    ABPd:71","","87","","19","101",""],
["64","20220503","07:00","","","","NBPs:.    NBPd:.    ABPs:144    ABPd:63","","88","","21","90",""],
["64","20220503","09:00","","","","NBPs:.    NBPd:.    ABPs:144    ABPd:62","","88","","20","89","37.1"],
["64","20220503","10:00","","","","NBPs:.    NBPd:.    ABPs:150    ABPd:65","","90","","18","93",""],
["64","20220503","12:00","","","","NBPs:.    NBPd:.    ABPs:152    ABPd:69","","92","","17","97",""],
["64","20220503","13:00","","","","NBPs:.    NBPd:.    ABPs:137    ABPd:61","","92","","24","86","37.2"],
["64","20220503","15:00","","","","NBPs:.    NBPd:.    ABPs:140    ABPd:61","","89","","18","87",""],
["64","20220503","16:00","","","","NBPs:141    NBPd:64    ABPs:149    ABPd:66","","91","90","20","93","36.1"],
["64","20220503","18:00","","","","NBPs:.    NBPd:.    ABPs:156    ABPd:69","","96","","21","98",""],
["64","20220503","19:00","","","","NBPs:.    NBPd:.    ABPs:152    ABPd:65","","93","","20","94",""],
["64","20220503","21:00","","","","NBPs:.    NBPd:.    ABPs:150    ABPd:64","","91","","21","93","35.5"],
["64","20220503","22:00","","","","NBPs:.    NBPd:.    ABPs:148    ABPd:64","","91","","20","92",""],
["64","20220504","00:00","1","10","1 _SP   _Mold","NBPs:.    NBPd:.    ABPs:153    ABPd:69","","89","","19","97",""],
["64","20220504","00:00","1","10","1 _SP   _Aspergillus sp","NBPs:.    NBPd:.    ABPs:153    ABPd:69","","89","","19","97",""],
["64","20220504","01:00","","","","NBPs:.    NBPd:.    ABPs:156    ABPd:68","","90","","20","97","37"],
["64","20220504","03:00","","","","NBPs:.    NBPd:.    ABPs:153    ABPd:63","","89","","22","93",""],
["64","20220504","04:00","","","","NBPs:.    NBPd:.    ABPs:160    ABPd:68","","90","","21","98","37.2"],
["64","20220504","06:00","","","","NBPs:.    NBPd:.    ABPs:156    ABPd:68","","97","","25","97",""],
["64","20220504","07:00","","","","NBPs:.    NBPd:.    ABPs:147    ABPd:66","","90","","22","93",""],
["64","20220504","09:00","","","","NBPs:.    NBPd:.    ABPs:154    ABPd:69","","103","","18","97","36.6"],
["64","20220504","10:00","","","","NBPs:.    NBPd:.    ABPs:141    ABPd:66","","94","","23","91",""],
["64","20220504","12:00","","","","NBPs:.    NBPd:.    ABPs:124    ABPd:59","","97","","26","81",""],
["64","20220504","13:00","","","","NBPs:.    NBPd:.    ABPs:110    ABPd:54","","97","","22","73","36.7"],
["64","20220504","15:00","","","","NBPs:.    NBPd:.    ABPs:93    ABPd:49","","91","","19","64",""],
["64","20220504","16:00","","","","NBPs:.    NBPd:.    ABPs:128    ABPd:57","","91","","23","80","36.3"],
["64","20220504","18:00","","","","NBPs:.    NBPd:.    ABPs:141    ABPd:62","","96","","25","88",""],
["64","20220504","19:00","","","","NBPs:.    NBPd:.    ABPs:142    ABPd:66","","93","","24","91",""],
["64","20220504","21:00","","","","NBPs:.    NBPd:.    ABPs:150    ABPd:70","","90","","19","97","36.3"],
["64","20220504","22:00","","","","NBPs:.    NBPd:.    ABPs:156    ABPd:72","","92","","23","100",""],
["64","20220505","00:00","","","","NBPs:.    NBPd:.    ABPs:162    ABPd:74","","92","","23","103",""],
["64","20220505","01:00","","","","NBPs:.    NBPd:.    ABPs:150    ABPd:74","","98","","22","99","36.9"],
["64","20220505","03:00","","","","NBPs:.    NBPd:.    ABPs:163    ABPd:73","","92","","20","103",""],
["64","20220505","04:00","","","","NBPs:.    NBPd:.    ABPs:162    ABPd:73","","94","","22","103","37"],
["64","20220505","06:00","3","8","新陳代謝","NBPs:.    NBPd:.    ABPs:161    ABPd:73","UricAcid(B):       4","95","","18","102",""],
["64","20220505","06:00","3","8","肝腎功能","NBPs:.    NBPd:.    ABPs:161    ABPd:73","BUN(B):      49         Creatinine(B):       2","95","","18","102",""],
["64","20220505","06:00","3","8","感染","NBPs:.    NBPd:.    ABPs:161    ABPd:73","CRP:      28","95","","18","102",""],
["64","20220505","06:00","3","8","電解質","NBPs:.    NBPd:.    ABPs:161    ABPd:73","K:       3              Na:     141","95","","18","102",""],
["64","20220505","06:00","3","24","CBC","NBPs:.    NBPd:.    ABPs:161    ABPd:73","AbsNeutro.#:    7353    Basophil:       1       Eosinophil:       4     Lymphocyte:       7     MCH:      29            MCHC:      31           MCV:      95","95","","18","102",""],
["64","20220505","07:00","","","","NBPs:.    NBPd:.    ABPs:153    ABPd:68","","94","","19","96",""],
["64","20220505","09:00","","","","NBPs:142    NBPd:69    ABPs:148    ABPd:66","","94","93","23","93","37.2"],
["64","20220505","10:00","","","","NBPs:.    NBPd:.    ABPs:150    ABPd:66","","98","","24","94",""],
["64","20220505","12:00","","","","NBPs:.    NBPd:.    ABPs:113    ABPd:52","","99","","20","72",""],
["64","20220505","13:00","","","","NBPs:.    NBPd:.    ABPs:121    ABPd:56","","99","","23","78",""],
["64","20220505","15:00","","","","NBPs:.    NBPd:.    ABPs:148    ABPd:65","","99","","23","93",""],
["64","20220505","16:00","","","","NBPs:139    NBPd:76    ABPs:140    ABPd:61","","95","97","23","87","36.8"],
["64","20220505","18:00","","","","NBPs:.    NBPd:.    ABPs:129    ABPd:52","","104","","21","78",""],
["64","20220505","19:00","","","","NBPs:.    NBPd:.    ABPs:140    ABPd:58","","105","","24","85",""],
["64","20220505","21:00","","","","NBPs:.    NBPd:.    ABPs:126    ABPd:58","","96","","19","81","37"],
["64","20220505","22:00","","","","NBPs:.    NBPd:.    ABPs:150    ABPd:67","","94","","20","95",""],
["64","20220506","00:00","","","","NBPs:.    NBPd:.    ABPs:127    ABPd:59","","89","","18","82",""],
["64","20220506","01:00","","","","NBPs:.    NBPd:.    ABPs:154    ABPd:73","","91","","18","100","37.1"],
["64","20220506","03:00","","","","NBPs:.    NBPd:.    ABPs:159    ABPd:72","","91","","16","101",""],
["64","20220506","04:00","","","","NBPs:.    NBPd:.    ABPs:125    ABPd:95","","91","","22","105","37"],
["64","20220506","06:00","","","","NBPs:.    NBPd:.    ABPs:162    ABPd:71","","91","","21","101",""],
["64","20220506","07:00","","","","NBPs:.    NBPd:.    ABPs:157    ABPd:68","","89","","19","98",""],
["64","20220506","09:00","","","","NBPs:.    NBPd:.    ABPs:129    ABPd:60","","95","","16","83","36.3"],
["64","20220506","10:00","","","","NBPs:.    NBPd:.    ABPs:149    ABPd:67","","95","","25","94",""],
["64","20220506","13:00","","","","NBPs:.    NBPd:.    ABPs:139    ABPd:78","","94","","23","98","36.2"],
["64","20220506","15:00","","","","NBPs:.    NBPd:.    ABPs:147    ABPd:65","","92","","17","92",""],
["64","20220506","16:00","","","","NBPs:.    NBPd:.    ABPs:136    ABPd:69","","89","","17","91","37"],
["64","20220506","18:00","","","","NBPs:.    NBPd:.    ABPs:129    ABPd:62","","88","","18","84",""],
["64","20220506","19:00","","","","NBPs:.    NBPd:.    ABPs:145    ABPd:70","","90","","22","95",""],
["64","20220506","21:00","","","","NBPs:.    NBPd:.    ABPs:134    ABPd:65","","89","","16","88","36.3"],
["64","20220506","22:00","","","","NBPs:.    NBPd:.    ABPs:166    ABPd:75","","90","","21","105",""],
["64","20220507","00:00","","","","NBPs:.    NBPd:.    ABPs:157    ABPd:70","","91","","20","99",""],
["64","20220507","01:00","","","","NBPs:148    NBPd:88    ABPs:.    ABPd:.","","94","108","20","","35.9"],
["64","20220507","03:00","","","","NBPs:139    NBPd:62    ABPs:.    ABPd:.","","92","88","20","",""],
["64","20220507","04:00","","","","NBPs:133    NBPd:74    ABPs:.    ABPd:.","","90","94","21","","35.8"],
["64","20220507","06:00","","","","NBPs:130    NBPd:71    ABPs:.    ABPd:.","","87","91","15","",""],
["64","20220507","07:00","","","","NBPs:141    NBPd:79    ABPs:.    ABPd:.","","90","99","18","",""],
["64","20220507","09:00","","","","NBPs:135    NBPd:74    ABPs:.    ABPd:.","","89","94","21","","36.2"],
["64","20220507","10:00","","","","NBPs:138    NBPd:66    ABPs:.    ABPd:.","","90","90","21","",""],
["64","20220507","12:00","","","","NBPs:133    NBPd:71    ABPs:.    ABPd:.","","90","92","24","",""],
["64","20220507","13:00","","","","NBPs:138    NBPd:73    ABPs:.    ABPd:.","","91","94","20","","36.6"],
["64","20220507","15:00","","","","NBPs:149    NBPd:70    ABPs:.    ABPd:.","","97","96","23","",""],
["64","20220507","16:00","","","","NBPs:136    NBPd:64    ABPs:.    ABPd:.","","88","88","19","","36.1"],
["64","20220507","18:00","","","","NBPs:134    NBPd:70    ABPs:.    ABPd:.","","94","91","16","",""],
["64","20220507","19:00","","","","NBPs:138    NBPd:76    ABPs:.    ABPd:.","","90","96","22","",""],
["64","20220507","21:00","","","","NBPs:138    NBPd:89    ABPs:.    ABPd:.","","91","105","21","","36.7"],
["64","20220507","22:00","","","","NBPs:155    NBPd:75    ABPs:.    ABPd:.","","91","102","22","",""],
["64","20220508","00:00","","","","NBPs:139    NBPd:100    ABPs:.    ABPd:.","","92","113","22","",""],
["64","20220508","01:00","","","","NBPs:146    NBPd:80    ABPs:.    ABPd:.","","87","102","15","","36.4"],
["64","20220508","03:00","","","","NBPs:155    NBPd:86    ABPs:.    ABPd:.","","93","109","17","",""],
["64","20220508","04:00","","","","NBPs:149    NBPd:82    ABPs:.    ABPd:.","","90","104","18","","36.2"],
["64","20220508","06:00","","","","NBPs:149    NBPd:92    ABPs:.    ABPd:.","","93","111","22","",""],
["64","20220508","07:00","","","","NBPs:152    NBPd:77    ABPs:.    ABPd:.","","95","102","23","",""],
["64","20220508","09:00","","","","NBPs:.    NBPd:.    ABPs:.    ABPd:.","","92","","22","","36.2"],
["64","20220508","10:00","","","","NBPs:146    NBPd:70    ABPs:.    ABPd:.","","91","95","19","",""],
["64","20220508","12:00","","","","NBPs:138    NBPd:66    ABPs:.    ABPd:.","","94","90","22","",""],
["64","20220508","13:00","","","","NBPs:148    NBPd:72    ABPs:.    ABPd:.","","92","97","23","","36.7"]     
    ]
  }
};




let VA_RESULT_NAME;
// thresholdsUrl = "file:///E:/git_hub/d3/timeline/lineChartBound.csv";
url = "file:///E:/git_hub/d3/timeline/lineChartBound.csv";

// va.messagingUtil.setOnDataReceivedCallback(a);

function validateData(data) {
  if (data) return true;
  false;
}
Date.prototype.addDays = function(days) {
  var dat = new Date(this.valueOf())
  dat.setDate(dat.getDate() + days);
  return dat;
}

var viewportwidth;
var viewportheight;

let  variableQueue = [];



variableQueue.push("id")
variableQueue.push("dateIndex")
variableQueue.push("timeIndex")
variableQueue.push("hierarchyIndex")
variableQueue.push("iconIdIndex")
variableQueue.push("typeIndex")
variableQueue.push("lineHoverIndex")
variableQueue.push("timeHoverIndex")
let id=variableQueue.indexOf("id");

let typeIndex=variableQueue.indexOf("typeIndex");
let iconIdIndex=variableQueue.indexOf("iconIdIndex");
// let contentIndex=6;
let dateIndex=variableQueue.indexOf("dateIndex");
let timeIndex=variableQueue.indexOf("timeIndex");
let hierarchyIndex=variableQueue.indexOf("hierarchyIndex");
let iconCodeIndex=variableQueue.indexOf("iconCodeIndex");
let lineHoverIndex=variableQueue.indexOf("lineHoverIndex");
let timeHoverIndex=variableQueue.indexOf("timeHoverIndex");

let defaultSelections = [];
let startColIndex=variableQueue.length;
let leftMargin=5;
let rightMargin=5;
let topMargin=30;
let axisBaseHeight=0;
let axisLeft=0;
let legendWidth=60;
let tickPadding=30;


let interval=5;
let dayWidth=50;
let xAxisWidth=1000;
let containerWidth;

let lineChartHeight=0;
let timeChartHeight=0;
let lineTimeChartRatio=0.6;
let lineChartCircleRadius=4;
let lineChartLineWidth=3;
let lineChartHoverOpacity=0.9;
let timeFormat ="YYYYMMDDH:m"
let dateFormat ="YYYYMMDD"
let xPosArray=[]
let start_t
let end_t
let period_value=0; 

  let legendTop=10;
  let iconMap=new Map();
  let iconPadding=2;
let clickZIndex = 5;
let defaultZIndex=1;
let clickedEleIndex=-1;
let clickedEleBorderColor="";
let selectBorderWidth=5;
let clickedBorderStyle="";
let timelineCardVerticalGap=40;
let border_color=' #dde5e8 solid';
let p_background_color='#f2f9ff';
let p_word_color="#000000";
let date_p_padding=10;
let date_p_l_border=2;
let lineChartTicks=4;
console.log(dateIndex)

// let imagePath ='https://cdn.dribbble.com/users/22018/screenshots/2456036/d3_1x.png';
function formatDate(){}
function sendSelectedRowToVA(rowId){
  const selections = [];
          selections.push({ row: rowId });
          console.log(selections);
          console.log(VA_RESULT_NAME);
          va.messagingUtil.postSelectionMessage(VA_RESULT_NAME, selections);


}
function originGetBeginEndDay(){

  if (startDay<interval)
  {
      startDay=1;   
  }else {
      
      startDay=Math.floor(startDay%interval)===0? (Math.floor(startDay/interval)-1)*interval+1 :Math.floor(startDay/interval)*interval+1;
      let lastDayOfMonth=get_end_of_month(begin);

      if(startDay>lastDayOfMonth){
          startDay=lastDayOfMonth;
      }
      
  }  
  startDay-=5;
  if (endDay<interval)
  {
      endDay=1;   
  }else {
      
      endDay= Math.floor(endDay%interval)===0? (Math.floor(endDay/interval))*interval:(Math.floor(endDay/interval)+1)*interval;
      let lastDayOfMonth=get_end_of_month(end);

      if(endDay>lastDayOfMonth){
          endDay=lastDayOfMonth;
      }
}
}


function getMinMax(arr) {
  if (!arr) {
    return null;
  }
  var minV = moment(arr[0], dateFormat, true);
  var maxV = moment(arr[0], dateFormat, true);
  var min="";
  var max="";
  for (a of arr) {
    var cur =moment(a, dateFormat, true)
    if  (cur< minV){
      minV = cur;
      // min=a;
    }else if (cur > maxV)  {
      maxV = cur;
      // max=a;
    }

  }
  
  return [minV, maxV];
}
function getMinMaxSorted(arr) {
  if (!arr) {
    return null;
  }
  var minV = moment(arr[0], dateFormat, true);
  var maxV = moment(arr[arr.length-1], dateFormat, true);
 
  
  return [minV, maxV];
}



const CSVToObject = (data, delimiter = ",", omitFirstRow = true) =>
 
   Object.fromEntries(data.split("\n").slice(omitFirstRow ? 1 : 0).map(v => {
    let fields = v.split(delimiter);
    return [fields[0].toUpperCase(), fields[1]];
  }));


  




function setXAxisSize(data) {


  let dateArray = new Array();
  var dateData=data.map(function(d) { return d[dateIndex] });
  // console.log(dateData);
  let minMax=getMinMaxSorted(dateData);
  console.log(minMax)
  let begin= minMax[0] ;
  let end=  minMax[1];
  let startDate= moment(minMax[0].toDate()) ;
  let endDate= moment(minMax[1].toDate()) ;
  
 console.log(minMax)

  // startDate=moment(s[3]+s[1]+s[2]+" "+"00:00:00", "YYYYMMMDD HH:mm:ss", true);
  // endDate=get_date(end,endDay);
  let numsOfDays=0
  while (startDate<= endDate) {


    dateArray.push(startDate)

    startDate = moment(startDate.clone().add(1, 'days').toDate());
    ++numsOfDays;
  }
  //  dateArray.push(startDate)

  startDate = moment(startDate.clone().add(1, 'days').toDate());
  // for(d in dateArray){
  //     console.log(d.toString());
  // }
  // let s= dateArray[0].format('YYYYMMDD').split('-');
  // let e= dateArray[dateArray.length-1].format('YYYYMMDD').split('-');

  // console.log(dateArray[0])
  // start_t=moment(s[0]+s[1]+s[2]+" "+"00:00:00", "YYYYMMDD HH:mm:ss", true);

  // end_t=moment(e[0]+e[1]+e[2]+" "+"23:59:59", "YYYYMMDD HH:mm:ss", true);
  start_t=moment(dateArray[0].format('YYYYMMDD')+" "+"00:00:00", "YYYYMMDD HH:mm:ss", true);

  end_t=moment(dateArray[dateArray.length-1].format('YYYYMMDD')+" "+"23:59:59", "YYYYMMDD HH:mm:ss", true);
  console.log(start_t)
  console.log(end_t)
  period_value=end_t.valueOf()-start_t.valueOf();
  console.log(period_value) 
  if (numsOfDays<interval){
    dayWidth=viewportwidth/numsOfDays;
  }
  else{
    dayWidth=viewportwidth/interval;
  }
  xAxisWidth=dayWidth*dateArray.length;
  console.log("day:"+dayWidth)
  console.log(xAxisWidth)
  return dateArray;
}

function xScaleS(dateTime){
  // console.log(dateTime)
  let t = moment(dateTime, timeFormat, true);
  // console.log(start_t.valueOf())
  let p = (t.valueOf()-start_t.valueOf())/period_value*(xAxisWidth);
  // console.log(p)
  return p;
}
function lineXScaleS(dateTime){
  return axisLeft+ xScaleS(dateTime);
}

function getColor(i,profile,color){
  try{
    return "#"+profile.color;
  }
  catch(e){
    return color(i);
  }

}



function resizeFromframe(data){

     
  // the more standards compliant browsers (mozilla/netscape/opera/IE7) use window.innerWidth and window.innerHeight
   
  if (typeof window.innerWidth != 'undefined')
  {
       viewportwidth = window.innerWidth,
       viewportheight = window.innerHeight
  }
   
 // IE6 in standards compliant mode (i.e. with a valid doctype as the first line in the document)
  
  else if (typeof document.documentElement != 'undefined'
      && typeof document.documentElement.clientWidth !=
      'undefined' && document.documentElement.clientWidth != 0)
  {
        viewportwidth = document.documentElement.clientWidth,
        viewportheight = document.documentElement.clientHeight
  }
   
  else
    {
          viewportwidth = document.getElementsByTagName('body')[0].clientWidth,
          viewportheight = document.getElementsByTagName('body')[0].clientHeight
    }

    lineChartHeight=viewportheight*(1-lineTimeChartRatio)
    timeChartHeight=viewportheight*lineTimeChartRatio
    //-->
  }

  function padLeft(str,length,char){
    if(str.length >= length)
        return str;
    else
        return padLeft(char +str,length);
}
function formatData(data,i){
  result=data;
  console.log(result);
  for (j=0; j<result.length ;++j){

    result[j][i]= padLeft(result[j][i],5, "0");
    // console.log(result[j][i]);
  }

  return result;
}
function lineChart(data,dateArray,columns,thresholds,contentIndex) {
  //remove old
  let containerHeight= lineChartHeight;
  console.log(data);  
  let leftP = d3.select(".svg-left")
  const leftPMove = () => {
    var y = window.scrollY;
    console.log(leftP)
  
    if (y >= 10){
      leftP.attr("width", 0+"px");
        return;
    }
    else{
      leftP.attr("width", axisLeft+"px");
        // note that this is a class defined in your CSS.
    }
  }

  window.removeEventListener("scroll",leftPMove );
  d3.select(".svg-container").remove();
  d3.select("svg").selectAll("circle").remove();
  


  let numCols=0;
  for (i=0; i<columns.length;++i){
    if ('label' in columns[i]) {
      numCols++;
    }
  }



  
  let nums_variables=numCols-startColIndex;
  let indexArray=[];
  let variablesWidth=nums_variables*(tickPadding+5);

  axisBaseHeight=containerHeight-5;
  axisLeft=leftMargin+variablesWidth+5;
  containerWidth=xAxisWidth+axisLeft+legendWidth;
 





  //let xaxisWidth=viewportwidth-leftMargin-legendWidth;

  
  //set canvas margins

  var xName=columns[0].label;
  //format the year 
  var parseTime = d3.timeParse("%d%b%Y %H:%M:%S");
  
  // data.forEach(function (d) {

  //     d[0] = parseTime(d[0]);
  //     console.log(d[0]);
  // });
  
  //scale xAxis 
  var xExtent = d3.extent(data, d => d[0]);




  var xData=dateArray;
  
  var xScale = d3
  .scalePoint()
  .domain([xData[0],xData[xData.length-1]])
  .range([axisLeft, xAxisWidth+axisLeft]);
  console.log("s xscale");
  //scale yAxis

  //we will draw xAxis and yAxis next

//draw xAxis and xAxis label
xAxis = d3.axisBottom()
    .scale(xScale)

let svgContainer =d3.select("div#lineChart")
.style('height',containerHeight+'px')
  .style('width',containerWidth+'px')
  .append("div")
  // // Container class to make it responsive.
  .classed("svg-container", true) 
    //refresh view point
    

  svgContainer.append("svg")
  // Responsive SVG needs these 2 attributes and no width and height attr.
  // .attr("preserveAspectRatio", "none")
  // .attr("viewBox", "0 0 1200 900")
  // Class to make it responsive.
  .classed("svg-content-responsive", true)
  // Fill with a rectangle for visualization.
    .append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0,"+axisBaseHeight+") ")
    .call(xAxis)
    .append("text")
    .attr("x", axisLeft+(900)/2) //middle of the xAxis
    .attr("y", "50") // a little bit below xAxis
    .text(xName)

    svgContainer.select(".svg-content-responsive")
    .append('rect')
    .attr("class", "default")
    .style('left',0+size_type)
    .style('top', 0+size_type)
    .style('width',axisLeft+xAxisWidth+size_type)
    .style('height', 1000+size_type)
    .style('fill','white')
    .on("click", function(d){
      console.log("default");
      
      postDefaultSelectionMessage(VA_RESULT_NAME,defaultSelections);
      
    });


    svgContainer.append("svg")
    .classed("svg-left", true)
    .attr("height",axisBaseHeight+10+"px")
    .attr("width", axisLeft+"px")
    leftP= d3.select(".svg-left")
   

    window.addEventListener("scroll",leftPMove );



    
    svgContainer.append("svg")
    .classed("svg-right", true)
    .attr("height",axisBaseHeight+10+"px")
    .attr("width", axisLeft+"px")

    // build y axis
    for(let i =0;i<nums_variables;i++){
      indexArray.push(i);
    }
    let domain=[]
    for(let i = startColIndex ; i<data[0].length; ++i){
      domain.push(i)
    }
    // let color = d3.scaleLinear().domain([0,(startColIndex), data[0].length - 1]).range(["#2A1594","#EE6002","#A349A4", "#26A69A"])
    let color = d3.scaleOrdinal().domain(domain).range(["#2A1594","#EE6002","#A349A4", "#26A69A","#F0CC00"])
   
    console.log(data[0].length);



    dataColumns = columns.slice(startColIndex)
    //right legend

    let mouseOverDiv = d3.select("#lineChart").append("div")

    .attr("class", "tooltip")
    .style("opacity", 0);



    //draw y axis, lines and circles
     if(data[0].length>1){

       for(let i =startColIndex; i<numCols;++i){

        console.log("s yscale"+i);
        columnName=columns[i].label;
        console.log("find column:"+columnName);          
 
        let threshold=thresholds.find( d =>{ console.log( d.variable); return d.variable.toLowerCase()===columnName.toLowerCase()});
        
        console.log("find column:"+columnName);
        // console.log("find threshold:"+threshold.upper_bound);       
        drawLineAndPoint(columnName,data,color,i,xScale,threshold,mouseOverDiv,contentIndex);
        var boxWidth=10;



    var legend = d3.select('svg')
    .append('g')
    .attr('class', 'legend');
    let j=i-startColIndex

    legend.append('rect')
    .attr('x', containerWidth - legendWidth+7)
    .attr('y', function(d) {

      return (j) * 15+topMargin;
    })
    .attr('width', boxWidth)
    .attr('height', boxWidth)
    .style('fill', function(d) {
      return getColor(i,threshold,color);
    });

    legend.append('text')
    .attr('x', containerWidth - legendWidth+boxWidth+12)
    .attr('y', function(d) {

      return (j * 15)+9+topMargin;
    })
    .text(function(d) {
      return columnName;
    });

       }
     } 
     console.log("s yscale");
  
   }


   function csvToArray(str, delimiter = ",") {
    // slice from start of text to the first \n index
    // use split to create an array from string by delimiter
    console.log(str)
    const headers = str.slice(0, str.indexOf("\n")).split(delimiter);
  
    // slice from \n index + 1 to the end of the text
    // use split to create an array of each csv value row
    const rows = str.slice(str.indexOf("\n") + 1).split("\n");
  
    // Map the rows
    // split values from each row into an array
    // use headers.reduce to create an object
    // object properties derived from headers:values
    // the object passed as an element of the array
    const arr = rows.map(function (row) {
      row=row.split('\r')[0];
      const values = row.split(delimiter);
      const el = headers.reduce(function (object, header, index) {
        object[header.trim().toLowerCase()] = values[index];
        return object;
      }, {});
      return el;
    });
  
    // return the array
    return arr;
  }


function drawLineAndPoint(columnName,data,color,i,xScale,threshold,mouseOverDiv,contentIndex){
//   var sumstat = d3.nest() 
//   .key(d => d.media)
//   .entries(data);

// console.log(sumstat)

// var body = d3.select('body');

//    body.append('input')
//        .attr('type','text')
//        .attr('id','thresholdUp'+i)
//        .attr('name','textInput')
//        .attr('value','Text goes here').attr("transform", "translate("+startLeft+",0)") ;

//    body.append('input')
//        .attr('type','text')
//        .attr('id','thresholdLow'+i)
//        .attr('name','textInput')
//        .attr('value','Text goes here').attr("transform", "translate("+startLeft+",0)") ;


var yMax=(Math.floor(d3.max(data,d=>{
  return isNaN(d[i]) ? -1: d[i]
})/10)+1)*10;
console.log(yMax);
console.log(threshold);
let  yScale
if (!isNaN(yMax)){
    ticks=lineChartTicks;
  let gap=yMax/ticks;
  let tickValues=[]
    if (threshold){
      let range0=parseInt(threshold.range_0);
      let range1=parseInt(threshold.range_1);
      yScale = d3.scaleLinear().domain([range0, range1]).range([axisBaseHeight, topMargin])
      //yAxis and yAxis label
      gap=(range1-range0)/ticks;
      for (let i =0;i<=ticks;i++){
        tickValues.push(range0+i*gap);
      }
      console.log(tickValues)
    }
    else {
      yScale = d3.scaleLinear().domain([0, yMax]).range([axisBaseHeight, topMargin])
      //yAxis and yAxis label
      for (let i =0;i<=ticks;i++){
        tickValues.push(i*gap);
      }
    }

    // tickPadding=axisLeft/(i-startColIndex-1)-40
yAxis = d3.axisLeft()
.scale(yScale)
.tickValues(tickValues)
.tickPadding(tickPadding*(i-startColIndex));

d3.select('.svg-left')
.append("g")

.attr("id", "yaxis"+i)
.attr("class", "axis")
.attr("transform", "translate("+axisLeft+",0)") //use variable in translate
.call(yAxis)
// .append("text")
// .attr("transform", "rotate(-90)")
// .attr("x", "-150")
// .attr("y", "-50"-i*20)
// .attr("text-anchor", "end")
// .text("US Media Ad Spending (Billions)")

d3.select('#yaxis'+i)
.selectAll("text")
.attr("fill",getColor(i,threshold,color));


d3.select('#yaxis'+i)
.append("text")
.attr("x", tickPadding*(i-startColIndex+2))
.text(columnName);


//set color pallete for different vairables
//select path - three types: curveBasis,curveStep, curveCardinal

var lineDrawer= d3.line()
    // .defined(d=>d.y)
    .x(d=>lineXScaleS(d.x))
    .y(d=>yScale(d.y))
    // .curve(d3.curveCardinal)
;



let maps=[]

for(let k=0;k<data.length;++k ){
  if (!isNaN(data[k][i])){
    let yValue=data[k][i];
    maps.push({x:data[k][dateIndex]+data[k][timeIndex],y:yValue} );
  }
  
}

//non-continue line 

// data.map(function(d) { 
//   yValue=d[i];
//   if (isNaN(d[i])) yValue=null;
//   return {x:d[dateIndex]+d[timeIndex],y:yValue} });



var svg=d3.select("svg");
svg
  // .selectAll(".line")
  // .append("g")
  // .attr("class", "line")
  // .data(data)
  // .enter()
  .append("path")
  .attr("d",lineDrawer(maps))
  .attr("fill", "none")
  .attr("stroke", d => getColor(i,threshold,color))
  .attr("stroke-width", lineChartLineWidth)
  .attr("z-index", 1)
  .attr("class","line"+i);
var line = svg.select(".line"+i);  


svg.selectAll(".circle"+i)
.data(data)
.enter()
.append("circle")
.attr("class","c"+i)
.attr("r", function(d) { return isNaN(d[i])  ? 0 : lineChartCircleRadius; })
.attr("cx", d => {
  // console.log(d[i])
  if(isNaN(d[i])||d[i]===""){
    // console.log(d[i])
    return -9999
  }else{
      
    return lineXScaleS(d[dateIndex]+d[timeIndex])
  }
  })
.attr("cy", d =>  yScale(d[i]))
.style("fill", d => {
  console.log(d[i]+" "+parseFloat(d[i]))
   try { // statements to try

    if (parseFloat(d[i])>threshold.upper_bound){
      // console.log(d[i]+">"+threshold.upper_bound)
      return "Crimson";
      return getColor(i,threshold,color);
      return color(i); 
    }else if (parseFloat(d[i])<threshold.lower_bound){
      // return "yellow";
      // console.log(d[i]+"<"+threshold.lower_bound)
      return "Crimson";
      return getColor(i,threshold,color);
      return color(i); 
    }
  }
  catch (e) {}
  return "white";
  // return color(i);
})
   .style("stroke", d => { 
    try {
    if (parseFloat(d[i])>threshold.upper_bound){
      console.log(d[i]+">"+threshold.upper_bound)
      return "Crimson";
    }else if (parseFloat(d[i])<threshold.lower_bound){
        // return "yellow";
        console.log(d[i]+"<"+threshold.lower_bound)
        return "Crimson";
    }
    return getColor(i,threshold,color);
  }catch (e) {
    return getColor(i,threshold,color);
   }
  //  return color(i); 
  })

  .each(function(d,rowid) {
    // if (d.date()%interval===1) {

      d3.select(this)
      .on("mouseover", function(event) { 
        console.log(event);
        console.log(d[dateIndex]+d[timeIndex]);
        svg.selectAll(".c"+i).attr("r", lineChartCircleRadius*1.5)
    
        let x =event.pageX;
        let y =event.pageY;
        // div.transition()
        mouseOverDiv
          .style("opacity", lineChartHoverOpacity)
          .style("left", (x+10) + "px")
          .style("top", (y -3) + "px")
          .style("z-index", 5);
          let value =Math.round(d[i] * 100) / 100;
          try { // statements to try
            let temContent=d[contentIndex]
            if (temContent=="(遺漏值)"){
              temContent=""
            }
			
			mouseOverDiv.html(columnName+":"+ value+ "<br>"+ d[dateIndex]+" "+d[timeIndex]+ "<br>"+temContent)
            
          }
          catch (e) {
            mouseOverDiv.html(columnName+":"+ value)        
          }  
        line.attr("stroke-width", lineChartLineWidth*1.5);
        })
      .on("mouseout", function(d) {
        // div.transition()
        svg.selectAll(".c"+i).attr("r", lineChartCircleRadius)
        mouseOverDiv
          .style("left", 0 + "px")
          .style("top", 0 + "px")
          .style("opacity", 0);
        line.attr("stroke-width", lineChartLineWidth); 
        })
        .on("click", function(d){
          sendSelectedRowToVA(rowid);

        });
      
    // }
  })
  

//append circle 

  // .selectAll("circle")


  

}



}

// if (window.addEventListener) {
//   // For standards-compliant web browsers
//   window.addEventListener("message", onMessage, false);
// } else {
//   window.attachEvent("onmessage", onMessage);
// }
// // Retrieve data and begin processing
// function onMessage(event) {
//   if (event && event.data)
//   {
//       //process event.data
//       console.log(event.data)
//   }
// }

// va.messagingUtil.setOnDataReceivedCallback(a);

// function a(resultData) {

//       //process event.data
//       console.log(resultData)

// }









var svg =d3.select("#svgID");
const card_horizen_gap=5;
const invisible_pos=-9999;
let p_border_color="";

// var zoom = d3.zoom()
//   .scaleExtent([0.1, 3 ])
//   .on('zoom', zoomed);

// var root = d3.select('#contain').call(zoom);
// var canvas = d3.select('#contain');

// function zoomed() {
//   var transform = d3.event.transform;
//   console.log( d3.event.transform);
//   canvas.style("transform", "translate("+transform.x+"px,"+transform.y+"px) scale(" + transform.k + ")")
//   .style("transition", "transform 30ms ease-in-out 0s");
// }





function CardStyle(background_color,border_color, icon){
 this.background_color=background_color;
 this.border_color=border_color;
 if(this.border_color===""){
  this.border_color=background_color;
 }

 this.icon=icon;

};

let exam_style=new CardStyle("feefda","","fas fa-exclamation-triangle");
let pic_style=new CardStyle("fbfeeb","","far fa-image");
let test_style=new CardStyle("e5d4fe","","");
let HO_style=new CardStyle("fddfe7","dac0cd","");
let EmergencyMedicine_style=new CardStyle("f8d4f0","","");
let MedicalCommon_style=new CardStyle("e6fede","","");
let default_style=new CardStyle("fddfe7","dac0cd","");
let second_style=new CardStyle("e5d4fe","C1C1FF","");
let EC_style=new CardStyle("dfd6f5","","fas fa-eye-dropper");
let HO_inhouse=new CardStyle("d5dcf6","c7cee0","");
let map_list=
[
  {"word":"E.cloacae","type":"EC"},
  {"word":"???�??","type":"PHO"},
  {"word":"檢�??","type":"CHE"},
  {"word":"�??液�?��?��??","type":"HO"},
  {"word":"??�診??��??","type":"EmergencyMedicine"},
  {"word":"??��????��??","type":"MedicalCommon"}, 
  {"word":"�??液�?��?��??�?????","type":"HO_inhouse"}, 
];


let style_list=
[
  {"word":"EC","obj":EC_style},
  {"word":"PHO","obj":pic_style},
  {"word":"CHE","obj":exam_style},
  {"word":"HO","obj":HO_style},
  {"word":"EmergencyMedicine","obj":EmergencyMedicine_style},
  {"word":"MedicalCommon","obj":MedicalCommon_style}, 
  {"word":"HO_inhouse","obj":HO_inhouse}, 
];



let style_map= new Map();
for (let i = 0 ; i < style_list.length ;i++){
  style_map.set(style_list[i]["word"],style_list[i]["obj"]);
}



function CardModel(text,hover, style,type,center_pos) {
this.rowid=-1;
 this.text=text;
 this.hover=hover;
 this.style=style;
 this.type=type;
 this.center_pos=center_pos;
 this.left_pos=0;
 this.right_pos=0;
 this.bar_id=0;
 this.hierarchy=-1;
 this.iconkey='';
};

function eventPos(){
  this.type="";
  this.center_pos=0;
  this.bar_id=0;
 };

const monthNames = ["January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

const gap =30;
const size_type="px";

let begin="";
let end ="";
let num_day_in = 0;
let day_y_array=[];

function getDateFormat(datestring){
// Please pay attention to the month (parts[1]); JavaScript counts months from 0:
// January - 0, February - 1, etc.
let mydate = new Date(parseint(datestring.substr(0,4)), parseint(datestring.substr(3,2)) - 1, parseint(datestring.substr(5,2))); 
console.log(mydate.to());
return mydate;
}





  function get_end_of_month(date){
    Day= parseInt(date.substr(6,2));
    Month= parseInt(date.substr(4,2));
    Year= parseInt(date.substr(0,4));    


    let d = new Date(Year, Month, 0);
    // last day in January
    let lastDay=parseInt(d.toDateString().split(" ")[2]);
    console.log(lastDay);
    return lastDay;

  }
//   get_end_of_month("20211112");

  function get_date(origin, day){
    Year= parseInt(origin.substr(0,4));
    Day= parseInt(origin.substr(6,2));
    Month= parseInt(origin.substr(4,2));

    let d = new Date(Year, Month-1, day);
    // last day in January
    console.log(d.toDateString());
    return d;

  }

  
  function get_y_data(jsonInput) {
    console.log(jsonInput);

    let dateArray = new Array();

    let begin= jsonInput[0].date;
    let end=jsonInput[jsonInput.length-1].date;
    let startDay= parseInt(begin.substr(6,2));
    let endDay= parseInt(end.substr(6,2));

   
    if (startDay<interval)
    {
        startDay=1;   
    }else {
        
        startDay=Math.floor(startDay%interval)===0? (Math.floor(startDay/interval)-1)*interval+1 :Math.floor(startDay/interval)*interval+1;
        let lastDayOfMonth=get_end_of_month(begin);
  
        if(startDay>lastDayOfMonth){
            startDay=lastDayOfMonth;
        }
        
    }  
    startDay-=5;
    if (endDay<interval)
    {
        endDay=1;   
    }else {
        
        endDay= Math.floor(endDay%interval)===0? (Math.floor(endDay/interval))*interval:(Math.floor(endDay/interval)+1)*interval;
        let lastDayOfMonth=get_end_of_month(end);

        if(endDay>lastDayOfMonth){
            endDay=lastDayOfMonth;
        }
    } 
    console.log(startDay);
    console.log(endDay);
    startDate=get_date(begin,startDay);
    endDate=get_date(end,endDay);
 
    while (startDate<= endDate) {

      dateArray.push(startDate)
      startDate = startDate.addDays(1);

    }
    
    dateArray.push(startDate)

    // for(d in dateArray){
    //     console.log(d.toString());
    // }
    return dateArray;
  }




function slice_month(date_array){
  let month_group= new Array();
  console.log(date_array);
    if (date_array.length<1) return month_group;

    let pre_date=date_array[0];
    let head_index=0;
    // console.log(pre_date);
    if (date_array.length===1){
      month_group.push(date_array);
      return month_group;
    }

    for (let i=0 ; i<date_array.length; i++){
        
          console.log(pre_date)
            if(pre_date.year()!== date_array[i].year()||pre_date.month() !== date_array[i].month() ){
                month_group.push(date_array.slice(head_index, i));    
 
                head_index=i;
            }else if (i===date_array.length-1){
                month_group.push(date_array.slice(head_index));                 
            }
        
        pre_date = date_array[i];
    }
    console.log(month_group);
    return month_group;
}




// function get_period(dataArray, interval){

//   begin=   parseInt(dataArray[0]["date"].substr(6,2));
//   end =    parseInt(dataArray[dataArray.length-1]["date"].substr(6,2));
//   console.log(end);
//   if (end - begin< 0) {
//       console.log("Error: wrong date order");
//       return;
//   }
//   begin=Math.floor(begin%interval)===0? (Math.floor(begin/interval)-1)*interval+1 :Math.floor(begin/interval)*interval+1;
  
//   end= Math.floor(end%interval)===0? (Math.floor(end/interval))*interval:(Math.floor(end/interval)+1)*interval;
//   console.log(end);
//   num_day_in = Math.floor((end - begin)/interval);
//   console.log(num_day_in);
//   day_y_array[0]=begin;
//   for (i=1; i<=num_day_in ;i++){
//     console.log(begin);
//     day_y_array[i]=day_y_array[0]+(i)*interval;
//     console.log(day_y_array[i]);
//   }
//   console.log(day_y_array);
// }


// get_period(datat,5);
// console.log(datat[0]["date"]);


function createPanel(top_pos,layer_num, item_h) {
  let obj = {};
  let layerPipe=[];
  let nums=0;
  let h = 100;
  let gap= (h-(item_h*layer_num))/layer_num;
  let curH=0;
  let curL=0;
  let curR=0;
  let maxH=0;
  this.createLayer=function(n) {
    let obj = {};
    obj.height = top_pos+n*(20+item_h);
    obj.left=invisible_pos;
    obj.right=invisible_pos;
    return obj;
  };

  this.addCard=function(card_left,card_right,card_height) {
    for(let i=0; i<layerPipe.length; i++){
        if(layerPipe[i].right+card_horizen_gap<card_left){
          layerPipe[i].left=card_left;
          layerPipe[i].right=card_right;
          // console.log(layerPipe[i]);
          if (layerPipe[i].height >maxH) maxH=layerPipe[i].height;
          return layerPipe[i];

        }
        else if(i===layerPipe.length-1){
          layerPipe[0].right=card_right;
          layerPipe[0].left=card_left;
          if (layerPipe[0].height >maxH) maxH=layerPipe[0].height;
          return layerPipe[0];
        }
    }
 
   

  };
  this.getMaxPanelH=function() {
    return maxH+10;
  };

  for (i=0;i<layer_num;i++){
    layerPipe.push(this.createLayer(i)); 
  };
}


function build_time_panel(data,dateArray,contentIndex){

  let card_border_width=2;
  let card_padding_width=5;
  let card_max_width=200;
  //adjust position
  d3.select("#timelineChart").remove();

  let container=
  d3.select("div#base")
  .append("div")
  .attr("id", "timelineChart")
  .style("overflow","visible");
  // // Container class to make it responsive.

  container
  .append("div")
  .attr("class", "default")
  .style('left',0+size_type)
  .style('top', 0+size_type)
  .style('width',axisLeft+xAxisWidth+size_type)
  .style('height', 1000+size_type)
  .style('background','white')
  .on("click", function(d){
    console.log("default");
    postDefaultSelectionMessage(VA_RESULT_NAME,defaultSelections);
    if (clickedEleIndex>=0){
            
      d3.select("#dot"+clickedEleIndex)
      .style("z-index", defaultZIndex);
      d3.select("#line"+clickedEleIndex)
      .style("z-index", defaultZIndex);
      d3.select("#card"+clickedEleIndex)
      .style("z-index", defaultZIndex)
      .style('border',d=>card_border_width+size_type+" #"+clickedEleBorderColor+" solid")
      // .style("border", selectBorderWidth+size_type);
    }
  });



  let mouseOverDiv = container.append("div")

  .attr("class", "tooltip")
  .style("opacity", 0);
  
  let divArray=["day_sec","type_sec","dot_sec","card_sec","line_sec","event_sec"];

  divArray.forEach(function(value){
    container
    .append("div")
    .attr("id", value)
  });
  d3.select("#timelineChart")
  .style('left',axisLeft+size_type)
  // .style('height',containerHeight+'px')
  .style('width',containerWidth+'px')



  let month_p=d3.select("#month").selectAll("div");
  let month_array=slice_month(dateArray);
  let date_p=d3.select("#day_sec").selectAll("div");
  let type_p=d3.select("#type_sec").selectAll("div");
  let event_p=d3.select("#event_sec").selectAll("div");

  let y_ruler_length=0;
  let month_width=0;

  //console.log(month_array[i][0]);
  console.log("day:"+dayWidth)
  for (let i = 0 ; i< month_array.length; i++){
    console.log(month_array[i][0]);
    let a =[];
    let monthValue=month_array[i][0].toString().split(' ')[1];

    
    let dayWidthNoPadding=dayWidth-2*date_p_padding
      date_p
      .data(month_array[i])
      .enter()
      .append("div")
      .merge(date_p)
      
      .style('width',dayWidthNoPadding+size_type).style('display', 'inline-block')
      .style('padding',date_p_padding+size_type)
      .style('background-color',p_background_color)
      .style('color',p_word_color)
      .style('border-bottom',date_p_l_border+size_type+border_color)
      .text(d=>
        // console.log(d.date());
        // return (d.date()%interval===1)? d.date().toString():""}
        monthValue+" "+d.date().toString())
      .each(function(d,i) {
        // if (d.date()%interval===1) {
          d3.select(this)
          .style('border-left',date_p_l_border+size_type+border_color)
          .style('padding-left',date_p_padding-date_p_l_border+size_type );
        // }
      });

      type_p
      .data(month_array[i])
      .enter()
      .append("div")
      .merge(date_p)
      .style('width',dayWidthNoPadding+size_type).style('height','200px').style('display', 'inline-block').style('padding',date_p_padding+size_type)
      .style('background-color',p_background_color)
      
      .text(d=>"")
      .each(function(d,i) {
        
        if (d.date()%interval===1) {
          d3.select(this)
          .style('border-left',date_p_l_border+size_type+border_color)
          .style('padding-left',date_p_padding-date_p_l_border+size_type );
        }
      });
      // event_p
      // .data(month_array[i])
      // .enter()
      // .append("div")
      // .merge(date_p)
      // .style('width',dayWidthNoPadding+size_type).style('height','200px').style('display', 'inline-block').style('padding',date_p_padding+size_type).style('border-top',date_p_l_border+size_type+border_color)
      // .style('background-color',p_background_color)
      // .text(d=>"")
      // .each(function(d,i) {
      //   if (d.date()%interval===1) {
      //     d3.select(this)
      //     .style('border-left',date_p_l_border+size_type+border_color)
      //     .style('padding-left',date_p_padding-date_p_l_border+size_type );
      //   }
      // });
      month_width=(dayWidth)*month_array[i].length-2*date_p_padding;
    // month_p
    // .data(a)
    // .enter()
    // .append("div")
    // .merge(month_p)
    // .text(d=>d.split(' ')[1])
    // .style('width',month_width+size_type).style('padding',date_p_padding+size_type)
    // .style('background-color',p_background_color)
    // .style('border-bottom',date_p_l_border+size_type+border_color)
    // .style('border-left',date_p_l_border+size_type+border_color)
    // .style('border-top',date_p_l_border+size_type+border_color)
    // .style('padding-left',date_p_padding-date_p_l_border+size_type )
    // .style('color',p_word_color);
    y_ruler_length=y_ruler_length+(date_p_padding*2+gap)*month_array[i].length;
    
  }
  // let s= month_array[0][0].toDateString().split(' ');
  // let e= month_array[month_array.length-1][month_array[month_array.length-1].length-1].toDateString().split(' ');
  // console.log(month_array[0][0].toDateString().split(' '));
  // let td=month_array[0][0].getDate();
  // let ty=month_array[0][0].getMonth();
  // let tm=month_array[0][0].getYear();
  //start from first day;
  // let start_t= moment(s[3]+s[1]+s[2]+" "+"00:00:00", "YYYYMMMDD HH:mm:ss", true);
  
  // let end_t= moment(e[3]+e[1]+e[2]+" "+"23:59:59", "YYYYMMMDD HH:mm:ss", true);
  console.log(start_t);
  console.log(end_t);
  console.log(y_ruler_length);
  let p_array=[];
  // let format_map = new Map();
  // for ( let i = 0 ; i < map_list.length ;i++){

  //   format_map.set(map_list[i]["word"],map_list[i]["type"]);
  // };

  let card_model_array=[];

  let card_model_array_index=0;

  
  for(let i = 0; i<data.length;i++){
      // while (datat[i]["type"]==="class_bar_end" && i<datat.length-1){
      //   i=i+1;
      // }
      // let key = format_map.get(datat[i]["content"]);
      // let type = data[i]["type"];
      // console.log(data[i])
      let type = data[i][typeIndex];
     
      if(type.length>0&&type!=="(遺漏值)"){

        let hierarchy= parseInt(data[i][hierarchyIndex]);
        let cardStyle=default_style;

        if(!isNaN(hierarchy)& hierarchy>=6){
          cardStyle=second_style;

        }
        let card= new CardModel(data[i][typeIndex],data[i][contentIndex],cardStyle,type,0);
        card.rowid=i;
        card.hierarchy=data[i][hierarchyIndex];
        card.iconkey=data[i][iconIdIndex];
        card_model_array[card_model_array_index]=card;
        // let period_value=end_t.valueOf()-start_t.valueOf();
      let t = moment(data[i][dateIndex]+data[i][timeIndex], timeFormat, true);
      let p = (t.valueOf()-start_t.valueOf())/period_value*(xAxisWidth);
      // console.log(t.valueOf()-start_t.valueOf())
      card_model_array[card_model_array_index].center_pos=Math.round(p, 2);
    
      // if (data[i]["bar_id"]>0){
      //   card_model_array[card_model_array_index].bar_id=data[i]["bar_id"];
      // }
      card_model_array_index=card_model_array_index+1;
      }
      
  }


  function no_dots(type){
    return type==="class_bar_start"||type==="class_bar_end";
  }

  let event_pos_array=[];
  for (let i = 0 ; i<data.length ;i++){
    let period_value=end_t.valueOf()-start_t.valueOf();
    let t = moment(data[i][dateIndex]+data[i][timeIndex], timeFormat, true);
    // console.log(t.valueOf()-start_t.valueOf());
    // console.log(period_value);
    // console.log((t.valueOf()-start_t.valueOf())/period_value*y_ruler_length);
    event_pos_array[i]=new eventPos();
    event_pos_array[i].type=data[i][typeIndex];
    // console.log(t);
    // console.log(start_t);
    // console.log(t.valueOf())
    // event_pos_array[i].bar_id=data[i]["bar_id"];
    let p = (t.valueOf()-start_t.valueOf())/period_value*xAxisWidth+date_p_padding+gap/2+axisLeft;

    event_pos_array[i].center_pos=Math.round(p, 2);
  }
  // for (let i = 0 ; i<card_model_array.length ;i++){
  //   let j=i;
  //   while (datat[j]["type"]==="class_bar_end"&&j<card_model_array.length)
    
  //     j++;}

 
  //   console.log(card_model_array[i]);
  // };
  let dot_r=5;
  let day_bottom_h = document.getElementById('day_sec').children[0].offsetTop+
  document.getElementById('day_sec').children[0].offsetHeight;

  d3.select("#dot_sec").selectAll("div")
  .data(card_model_array)
  .enter()
  .append("div")
  .each(function(d,i) {
    console.log(!no_dots(d.type));
    if (!no_dots(d.type)) {
      d3.select(this)
      .attr("id", "dot"+i)
      .style('left',d=>{return d.center_pos-dot_r+size_type;})
      .style('width',dot_r*2+size_type)
      .style('height',dot_r*2+size_type)
      .style('top',day_bottom_h-dot_r+1+size_type);
    }
  });
  // d3.select("#dot_sec").selectAll("div")
  // .data(card_model_array)
  // .enter()
  // .append("div")
  // .each(function(d,i) {
  //   if (!no_dots(d.type)) {
  //     d3.select(this)
  //     .style('left',d=>{return d.center_pos-dot_r+size_type;})
  //     .style('width',dot_r*2+size_type)
  //     .style('height',dot_r*2+size_type)
  //     .style('top',day_bottom_h-dot_r+1+size_type);
  //   }
  // });


  //fill text to card


 
  console.log(card_model_array);
  let enterSelection=
  d3.select("#card_sec")
  .selectAll("div")
  .data(card_model_array)
  .enter()
  .append("div")

  .style('background-color',d=>"#"+d.style.background_color)
  .style('border',d=>card_border_width+size_type+" #"+d.style.border_color+" solid")
  .style('padding',card_padding_width+size_type)
  .style('display','flex')
  .each(function(d,i) {
      d3.select(this)
      .attr("id", "card"+i)
      .attr('class', d.style.icon)
      .attr('font-weight', 900)
      .append('img')
      
      .attr('src', d=>{
          try{
            return iconMap[parseInt(d.iconkey)-1].location;
          }catch(e){
            return "";
          }
        }
      )
      // .attr('width','16px')
      // .attr('height','16px')
      .style('padding-right',iconPadding+size_type);
      // console.log(iconMap)
      d3.select(this)
      .append('text').text(d=>d.text);
      // if (d.type!="class_bar_start") {
      //   d3.select(this)
      //   .style('max-width',card_max_width+size_type);
      // }
      // console.log(d)
      let row=d;
      d3.select(this)
    .on("mouseover",  function(event) { 
      console.log(event);
      console.log(row);
      let scrollT=window.scrollY;
      console.log(scrollT);
      let x =event.pageX-axisLeft;
      let y =event.pageY-axisBaseHeight
      // div.transition()
      mouseOverDiv
        .style("opacity", .8)
        .style("left", (x) + "px")
        .style("top", (y) + "px")
        .style("z-index", 10);
        try { // statements to try
  
          mouseOverDiv.html(row.hover)
        }
        catch (e) {
          mouseOverDiv.html("")      
        }  
      // line.attr("stroke-width", 4);
      })
    .on("mouseout", function(d) {
      // div.transition()
      // svg.selectAll(".c"+i).attr("r", 2.5)
      mouseOverDiv
        .style("left", 0 + "px")
        .style("top", 0 + "px")
        .style("opacity", 0);
      // line.attr("stroke-width", 2); 
      })

    // timeline click 
    .on('click', function () {
              
        try{

        

          sendSelectedRowToVA(d.rowid);
          console.log("pre "+ clickedEleIndex)
          if (clickedEleIndex>=0){
            
            d3.select("#dot"+clickedEleIndex)
            .style("z-index", defaultZIndex);
            d3.select("#line"+clickedEleIndex)
            .style("z-index", defaultZIndex);
            d3.select("#card"+clickedEleIndex)
            .style("z-index", defaultZIndex)
            .style('border',d=>card_border_width+size_type+" #"+clickedEleBorderColor+" solid")
            // .style("border", selectBorderWidth+size_type);
          }
          clickedEleIndex=i;
          clickedEleBorderColor=row.style.border_color;
          console.log("click "+ clickedEleIndex)

          d3.select("#dot"+clickedEleIndex)
          .style("z-index", clickZIndex);
          d3.select("#line"+clickedEleIndex)
          .style("z-index", clickZIndex);
          d3.select("#card"+clickedEleIndex)
          .style("z-index", clickZIndex)
          .style('border',d=>selectBorderWidth+size_type+" #"+row.style.border_color+" solid")
         

        }
        catch(e){

        }
        


    });
  })
;
 



  let event_sec_h = document.getElementById('event_sec').offsetTop;
  let type_sec_h = document.getElementById('type_sec').offsetTop;
  let type_p_abtract = new  createPanel(type_sec_h+10,1000,timelineCardVerticalGap);
  let event_p_abtract = new  createPanel(event_sec_h+10,1000,timelineCardVerticalGap);

  let children = document.getElementById('card_sec').children;

  // let card_l_array=p_array.slice();
  // let card_r_array=[];


  
  let card_h_array=[];
  for (var i = 0; i < children.length; i++) {

    // if (card_model_array[i].type==="class_bar_start") {
    //   card_model_array[i].left_pos=card_model_array[i].center_pos;
    //   for(let j = i;j < data.length; j++){
    //     if(event_pos_array[j].type==="class_bar_end"&&card_model_array[i].bar_id===event_pos_array[j].bar_id){
    //       card_model_array[i].right_pos=event_pos_array[j].center_pos;
    //       console.log(card_model_array[i].right_pos);
    //       break;
    //     }
    //     else{
    //       card_model_array[i].right_pos=9999;
    //     }
    //   }

    // }else{
      card_model_array[i].left_pos=card_model_array[i].center_pos-2;
      card_model_array[i].right_pos=card_model_array[i].center_pos+(children[i].offsetWidth);
    // }
    if (card_model_array[i]){

      let hierarchy =parseInt(card_model_array[i].hierarchy);

      card_h_array.push(type_p_abtract.addCard(card_model_array[i].left_pos, card_model_array[i].right_pos).height);
      // console.log(card_h_array);
    // if(!isNaN(hierarchy)){
    //   if (hierarchy>5 || card_model_array[i].type==="class_bar_start" || card_model_array[i].type==="class_bar_end") {
    //     card_h_array.push(type_p_abtract.addCard(card_model_array[i].left_pos, card_model_array[i].right_pos).height);  

    //   }
    //   else{
    //     card_h_array.push(event_p_abtract.addCard(card_model_array[i].left_pos, card_model_array[i].right_pos).height);
    //   }
    // }
    // else
    // {   
    //   card_h_array.push(event_p_abtract.addCard(card_model_array[i].left_pos, card_model_array[i].right_pos).height);
    // }
  }
  }

  d3.select("#card_sec").selectAll("div")
  .data(card_model_array)
  .style('left',d=>{return d.center_pos+size_type;}).style('top',10+size_type).style('top',10+size_type)
  // .each(function(d) {

  //   if (d.type==="class_bar_start") {

  //     d3.select(this)
  //     .style('width',d.right_pos-d.left_pos-card_border_width-card_padding_width+size_type);
  //   }
  // });
  // console.log(card_h_array);
  d3.select("#card_sec").selectAll("div")
  .data(card_h_array).style('top',d=>d+size_type);


  let line_len_array=[];
  let dot_children = document.getElementById('dot_sec').children;
  for (var i = 0; i < dot_children.length; i++) {
    line_len_array[i]=children[i].offsetTop-dot_children[i].offsetTop;
  }

  let line_children = document.getElementById('line_sec').children;
  d3.select("#line_sec").selectAll("div")
  .data(card_model_array)
  .enter()
  .append("div")

  .each(function(d,i) {
    if (!no_dots(d.type)) {
      d3.select(this)
      .attr("id", "line"+i)
      .style('left',d=>{return d.center_pos-line_children[0].clientWidth/2+size_type;})
      .style('top', dot_children[0].offsetTop+size_type);
    }
  });
  d3.select("#line_sec").selectAll("div")
  .data(line_len_array)
  .each(function(d,i) {
    if (!no_dots(d.type)) {
      d3.select(this)
      .style('height',d=>{return d+size_type;});
    }
  });

  d3.select("#line_sec").selectAll("div")
  .data(card_model_array)
  .style('background-color',d=>"#"+d.style.border_color);

  d3.select("#dot_sec").selectAll("div")
  .data(card_model_array)
  .style('background-color',d=>"#"+d.style.border_color); 
  
  d3.select("#type_sec").selectAll("div")
  .style("height",type_p_abtract.getMaxPanelH()+"px");

};





// d3.select("#month").append("svg").append('line').attr('x1', 100).attr('y1', 0).attr('x2', 100).attr('y2', 100)
// .style('stroke', 'red')
// .style('stroke-width', 10)
// .style('z-index', 0)
;

function buildMonthPanel(input){
    let year = input.substr(0,4);
    let month = input.substr(4,2);
    let date = input.substr(6,2);

    month=monthNames[parseInt(month)-1];
    let output = year+" "+month;
    return output;
  }


  function updateScroll(){
    window.scrollTo(100, 0);
    

  }

  function delay(time) {
    return new Promise(resolve => setTimeout(resolve, time));
  }
  
  
 if (testMode===true){
  //   iconMap= csvToArray(iconTest);
 


  //   console.log(iconMap)
  //   let thresholds =  csvToArray(csvTest).sort(function(a, b){
  //   v1= a.variable.toLowerCase();
  //   v2 = b.variable.toLowerCase();
  //   if (v1 < v2) return -1;
  //   if (v1 > v2) return 1;
  //   return 0;});
  
  //   console.log(thresholds)
  //   let data=datat.data.data;
  //   let columns =datat.data.columns;
  //   data.sort((a,b)=> (a[0]+a[1]+a[2] > b[0]+b[1]+b[2] ? 1 : -1));
    
  let thresholds =  csvToArray(thresholdTest).sort(
    function(a, b){
      v1= a.variable.toLowerCase();
      v2 = b.variable.toLowerCase();
      if (v1 < v2) return -1;
      if (v1 > v2) return 1;
      return 0;}
  );

    iconMap = csvToArray(iconTest);
    
    console.log(thresholds)
    console.log(iconMap)
    let data=testData.data.data;

    // data.sort((a,b)=> (a[0]+a[1]+a[2] > b[0]+b[1]+b[2] ? 1 : -1));
    resizeFromframe(data);
    let dateArray =setXAxisSize(data)
    let columns =testData.data.columns;
    console.log(dateArray)
  
    lineChart(data,dateArray,columns,thresholds,lineHoverIndex);
    
    build_time_panel(data,dateArray,timeHoverIndex);

    delay(1000).then(() =>window.scrollTo({top:0 ,left:9999999,behavior: 'smooth'}));

   }
function postDefaultSelectionMessage(VA_RESULT_NAME,defaultSelections){

  va.messagingUtil.postSelectionMessage(VA_RESULT_NAME, defaultSelections);
  
}
  
const getApi = async (url) => {

  const resp = await fetch(url)  
  return resp.text();
  
  }
  
if (window.addEventListener) {
  // For standards-compliant web browsers
  console.log('get')
  window.addEventListener("message", onMessage, false);
} else {
  window.attachEvent("onmessage", onMessage);
}




// Retrieve data and begin processing
function onMessage(event) {
  if (event && event.data )
  {
    VA_RESULT_NAME = event.data.resultName;
      //process event.data
      console.log(event.data);
      if(validateData(event.data)){
 

        console.log(VA_RESULT_NAME);
        let numRows=event.data.rowCount
        for(let i =0;i<numRows;++i){
          defaultSelections.push(i)
        }


        let data = event.data.data
        // data=formatData(data,timeIndex)
       
        getApi(thresholdsUrl).then((resp) => {

            let thresholds =  csvToArray(resp).sort(
              function(a, b){
                v1= a.variable.toLowerCase();
                v2 = b.variable.toLowerCase();
                if (v1 < v2) return -1;
                if (v1 > v2) return 1;
                return 0;}
            );

            getApi(iconMapUrl).then((resp) => {
              iconMap = csvToArray(resp);
              
              console.log(thresholds)
              console.log(iconMap)
              

              // data.sort((a,b)=> (a[0]+a[1]+a[2] > b[0]+b[1]+b[2] ? 1 : -1));
              resizeFromframe(data);
              let dateArray =setXAxisSize(data)
              let columns =event.data.columns;
              console.log(dateArray)
            
              lineChart(data,dateArray,columns,thresholds,lineHoverIndex);
              
              build_time_panel(data,dateArray,timeHoverIndex);

              delay(1000).then(() =>window.scrollTo({top:0 ,left:9999999,behavior: 'smooth'}));
    
            });
        });
    }
  
  }
}
